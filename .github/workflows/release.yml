name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false

jobs:
  release:
    name: Semantic Versioning and Deployment
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Import GPG Key
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Decodificar a chave
          echo "$GPG_PRIVATE_KEY" | base64 -d > private-key.asc

          # Verificar arquivo
          head -n 1 private-key.asc | grep 'BEGIN PGP PRIVATE KEY BLOCK' || exit 1

          # Importar chave
          gpg --batch --passphrase "$GPG_PASSPHRASE" --pinentry-mode loopback --import private-key.asc

          # Configurar ambiente
          echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye

      - name: Configure Maven Settings
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>ossrh</id>
                <username>\${env.OSSRH_USERNAME}</username>
                <password>\${env.OSSRH_TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>gpg</id>
                <properties>
                  <gpg.executable>gpg</gpg.executable>
                  <gpg.passphrase>\${env.GPG_PASSPHRASE}</gpg.passphrase>
                </properties>
              </profile>
            </profiles>
          </settings>
          EOF

      - name: Run Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        with:
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/changelog
            @semantic-release/git
          branch: main
          extends: .releaserc.json

      - name: Deploy to Maven Central
        if: success()
        run: mvn -B deploy -P release
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}